import os
import sys
import numpy as np
from math import floor

def read_kpoints():
  kp = []
  kpnames = []
  s = ' '
  print 'Please enter name of point and k-points in reduced coordinates x,y,z={0, ..., 0.5}. Press enter after each entry. Press enter on empty line in order to finish.'
  print 'e.g. GAMMA 0 0 0'
  while not '' == s:
    s = raw_input('-->')
    splitline = s.strip().split()
    if (not '' == s) and (4 == len(splitline)):
      kpnames.append(splitline[0])
      kp.append(splitline[1:])
    elif not '' == s:
      print 'Invalid entry. Omitting.'
  print 'Finished reading k-points from command line.'
  return np.array(kp, dtype=float), kpnames

def floor_kp(floatval, den):
  return floor(floatval*den)

def generate_kpath(nkp, specialkp, kpnames):
  den = 9999
  nspecial = len(specialkp)
  
  allkp = [] #first entry is name, other entries are enumerators x y z
  multiplier = np.linspace(0,1,num=nkp, endpoint=False)
  
  for i in range(len(specialkp)-1):
    diffvec = specialkp[i+1] - specialkp[i]
    vecs = [specialkp[i] + m*diffvec for m in multiplier]
    allkp.append([kpnames[i], floor_kp(vecs[0][0], den), floor_kp(vecs[0][1], den), floor_kp(vecs[0][2], den)])
    for v in vecs[1:]:
      allkp.append(['', floor_kp(v[0], den), floor_kp(v[1], den), floor_kp(v[2], den)])
  #add last k-point
  allkp.append([kpnames[-1], floor_kp(specialkp[-1][0], den), floor_kp(specialkp[-1][1], den), floor_kp(specialkp[-1][2], den)])
  return den, allkp

def write_klist(outfilename, den, kp):
  outfilehandle = open(outfilename, 'w')
  
  outfilehandle.write('%-9s %4i %4i %4i %4i  %2.1f%s\n' % (kp[0][0], kp[0][1], kp[0][2], kp[0][3], den, 2, '-8.00 8.00    k-list generated by a python script'))
  for k in kp[1:]:
    outfilehandle.write('%-9s %4i %4i %4i %4i  %2.1f\n' % (k[0], k[1], k[2], k[3], den, 2))
  outfilehandle.write('END\n')
  outfilehandle.close()
  
  return 0

def main():
  if(3 == len(sys.argv)):
    nkp = int(sys.argv[1])
    outfilename = sys.argv[2]
    
    #read special k-points in reduced coordinates from command line
    skp, kpnames = read_kpoints()
    
    #generate k-path between special k-points
    den, kp = generate_kpath(nkp, skp, kpnames)
    
    #write output file
    write_klist(outfilename, den, kp)
    
    return 0
  else:
    print 'Warning. Wrong number of command line arguments. Please provide number of k-points in each segment and output file name.'
    return 1
  
main()